--- a/xen/arch/x86/traps.c
+++ b/xen/arch/x86/traps.c
@@ -3548,6 +3548,9 @@ long register_guest_nmi_callback(unsigne
     struct domain *d = v->domain;
     struct trap_info *t = &v->arch.guest_context.trap_ctxt[TRAP_nmi];
 
+    if ( !is_canonical_address(address) )
+        return -EINVAL;
+
     t->vector  = TRAP_nmi;
     t->flags   = 0;
     t->cs      = (is_pv_32on64_domain(d) ?
@@ -3675,6 +3678,9 @@ long do_set_trap_table(XEN_GUEST_HANDLE(
         if ( cur.address == 0 )
             break;
 
+        if ( !is_canonical_address(cur.address) )
+            return -EINVAL;
+
         fixup_guest_code_selector(curr->domain, cur.cs);
 
         memcpy(&dst[cur.vector], &cur, sizeof(cur));
--- a/xen/arch/x86/x86_64/entry.S
+++ b/xen/arch/x86/x86_64/entry.S
@@ -168,19 +168,33 @@ UNLIKELY_END(trace)
         popq  %r10         # Shadow RIP
         cmpq  %r10,UREGS_rip+8(%rsp)
         popq  %rcx         # Shadow hypercall index
-        jne   skip_clobber /* If RIP has changed then don't clobber. */
+        jne   hypercall_done /* If RIP has changed then don't clobber. */
         leaq  hypercall_args_table(%rip),%r10
         movb  (%r10,%rcx,1),%cl
         movl  $0xDEADBEEF,%r10d
-        cmpb  $1,%cl; jb skip_clobber; movq %r10,UREGS_rdi(%rsp)
-        cmpb  $2,%cl; jb skip_clobber; movq %r10,UREGS_rsi(%rsp)
-        cmpb  $3,%cl; jb skip_clobber; movq %r10,UREGS_rdx(%rsp)
-        cmpb  $4,%cl; jb skip_clobber; movq %r10,UREGS_r10(%rsp)
-        cmpb  $5,%cl; jb skip_clobber; movq %r10,UREGS_r8(%rsp)
-        cmpb  $6,%cl; jb skip_clobber; movq %r10,UREGS_r9(%rsp)
-skip_clobber:
+        cmpb  $1,%cl; jb hypercall_done; movq %r10,UREGS_rdi(%rsp)
+        cmpb  $2,%cl; jb hypercall_done; movq %r10,UREGS_rsi(%rsp)
+        cmpb  $3,%cl; jb hypercall_done; movq %r10,UREGS_rdx(%rsp)
+        cmpb  $4,%cl; jb hypercall_done; movq %r10,UREGS_r10(%rsp)
+        cmpb  $5,%cl; jb hypercall_done; movq %r10,UREGS_r8(%rsp)
+        cmpb  $6,%cl; jb hypercall_done; movq %r10,UREGS_r9(%rsp)
 #endif
+hypercall_done:
+        movq  UREGS_rip(%rsp),%rcx
         movq  %rax,UREGS_rax(%rsp)       # save the return value
+        sarq  $47,%rcx
+        incl  %ecx
+        cmpl  $1,%ecx
+UNLIKELY_START(a, syscall_gpf)
+        leaq  VCPU_trap_bounce(%rbx),%rdx
+        movl  $TRAP_gp_fault,UREGS_entry_vector(%rsp)
+        movq  VCPU_gp_fault_addr(%rbx),%rax
+        movl  $0,TRAPBOUNCE_error_code(%rdx)
+        movb $TBF_EXCEPTION|TBF_EXCEPTION_ERRCODE|TBF_INTERRUPT,TRAPBOUNCE_flags(%rdx)
+        movq  %rax,TRAPBOUNCE_eip(%rdx)
+        call  create_bounce_frame
+        jmp   test_all_events
+UNLIKELY_END(syscall_gpf)
 
 /* %rbx: struct vcpu */
 test_all_events:
@@ -210,6 +224,10 @@ test_guest_events:
         call  create_bounce_frame
         jmp   test_all_events
 
+bad_hypercall:
+        movq $-ENOSYS,%rax
+        jmp  hypercall_done
+
         ALIGN
 /* %rbx: struct vcpu */
 process_softirqs:
@@ -253,10 +271,6 @@ process_trap:
         call create_bounce_frame
         jmp  test_all_events
 
-bad_hypercall:
-        movq $-ENOSYS,UREGS_rax(%rsp)
-        jmp  test_all_events
-
 ENTRY(sysenter_entry)
         sti
         pushq $FLAT_USER_SS
