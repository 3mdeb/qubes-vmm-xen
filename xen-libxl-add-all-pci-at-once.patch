# HG changeset patch
# User Marek Marczykowski <marmarek@mimuw.edu.pl>
# Date 1307661061 -7200
# Node ID 9d58dbe3e848401883b3b6720b8f28323f10ac6f
# Parent  0f8e34c6564ea5190dc0bef93f59ac299f694bdb
libxl: add all pci devices to xenstore at once (during VM create)

When adding pci devices one by one, pciback notice only the first one. For
every next, "state" is left as is (usualy "4" in that time), so backend will
not rescan xenstore. So when VM is starting all devices should be added at once
and then backend can initialize it.

This applies only to pci, because only pci backend have one xenstore dir for
multiple devices.

Signed-off-by: Marek Marczykowski <marmarek@mimuw.edu.pl>

diff -r 0f8e34c6564e -r 9d58dbe3e848 tools/libxl/libxl_create.c
--- a/tools/libxl/libxl_create.c	Sun Jun 05 18:29:20 2011 +0200
+++ b/tools/libxl/libxl_create.c	Fri Jun 10 01:11:01 2011 +0200
@@ -405,6 +405,7 @@ static int do_domain_create(libxl_ctx *c
                             libxl_console_ready cb, void *priv,
                             uint32_t *domid_out, int restore_fd)
 {
+    libxl__gc gc = LIBXL_INIT_GC(ctx);
     libxl__device_model_starting *dm_starting = 0;
     libxl_device_model_info *dm_info = &d_config->dm_info;
     libxl_domain_build_state state;
@@ -539,6 +540,12 @@ static int do_domain_create(libxl_ctx *c
 
     for (i = 0; i < d_config->num_pcidevs; i++)
         libxl__device_pci_add(ctx, domid, &d_config->pcidevs[i], 1);
+    ret = libxl_create_pci_backend(&gc, domid, d_config->pcidevs, d_config->num_pcidevs);
+    if (ret < 0) {
+        fprintf(stderr,"xl: fatal error: %s:%d, rc=%d: libxl_create_pci_backend\n",
+                __FILE__,__LINE__, ret);
+        goto error_out;
+    }
 
     if ( cb && (d_config->c_info.hvm || d_config->b_info.u.pv.bootloader )) {
         if ( (*cb)(ctx, domid, priv) )
@@ -546,12 +553,14 @@ static int do_domain_create(libxl_ctx *c
     }
 
     *domid_out = domid;
+    libxl__free_all(&gc);
     return 0;
 
 error_out:
     if (domid)
         libxl_domain_destroy(ctx, domid, 0);
 
+    libxl__free_all(&gc);
     return ret;
 }
 int libxl_domain_create_new(libxl_ctx *ctx, libxl_domain_config *d_config,
diff -r 0f8e34c6564e -r 9d58dbe3e848 tools/libxl/libxl_internal.h
--- a/tools/libxl/libxl_internal.h	Sun Jun 05 18:29:20 2011 +0200
+++ b/tools/libxl/libxl_internal.h	Fri Jun 10 01:11:01 2011 +0200
@@ -203,6 +203,7 @@ _hidden int libxl__wait_for_backend(libx
 /* from libxl_pci */
 
 _hidden int libxl__device_pci_add(libxl_ctx *ctx, uint32_t domid, libxl_device_pci *pcidev, int starting);
+_hidden int libxl_create_pci_backend(libxl__gc *gc, uint32_t domid, libxl_device_pci *pcidev, int num);
 
 /* xl_exec */
 
diff -r 0f8e34c6564e -r 9d58dbe3e848 tools/libxl/libxl_pci.c
--- a/tools/libxl/libxl_pci.c	Sun Jun 05 18:29:20 2011 +0200
+++ b/tools/libxl/libxl_pci.c	Fri Jun 10 01:11:01 2011 +0200
@@ -234,7 +234,7 @@ static void libxl_create_pci_backend_dev
     flexarray_append_pair(back, libxl__sprintf(gc, "state-%d", num), libxl__sprintf(gc, "%d", 1));
 }
 
-static int libxl_create_pci_backend(libxl__gc *gc, uint32_t domid, libxl_device_pci *pcidev, int num)
+int libxl_create_pci_backend(libxl__gc *gc, uint32_t domid, libxl_device_pci *pcidev, int num)
 {
     libxl_ctx *ctx = libxl__gc_owner(gc);
     flexarray_t *front = NULL;
@@ -718,7 +718,10 @@ out:
         }
     }
 
-    rc = libxl_device_pci_add_xenstore(gc, domid, pcidev, starting);
+    if (!starting)
+        rc = libxl_device_pci_add_xenstore(gc, domid, pcidev, starting);
+    else
+        rc = 0;
     return rc;
 }
 
exporting patch:
<fdopen>
