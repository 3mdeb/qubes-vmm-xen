From afacfde98a0112f2ca73b53c7e9ea86c7c402354 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Mon, 26 May 2014 17:35:06 +0200
Subject: [PATCH] hotplug: fix race condition between script and backend driver
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

libxl add new device with state=1, then kernel backend driver process
this device. The problem is that it first registers the device (which
sends event to udevd to call hotplug script) and then update state=2.
Because of driver architecture it is rather hard to fix, so add a
workaround in hotplug script.

Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
---
 tools/hotplug/Linux/block | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/tools/hotplug/Linux/block b/tools/hotplug/Linux/block
index 06de5c9..e5b87ef 100644
--- a/tools/hotplug/Linux/block
+++ b/tools/hotplug/Linux/block
@@ -253,9 +253,16 @@ case "$command" in
 
         claim_lock "block"
 
-        # Avoid a race with the remove if the path has been deleted, or
-	# otherwise changed from "InitWait" state e.g. due to a timeout
+        xenstore-watch -n 2 "$XENBUS_PATH/state" >/dev/null &
+        watch_pid=$!
         xenbus_state=$(xenstore_read_default "$XENBUS_PATH/state" 'unknown')
+        if [ "$xenbus_state" == '1' ]; then
+            # device not initialized by kernel yet, wait for state change
+            wait $watch_pid
+            xenbus_state=$(xenstore_read_default "$XENBUS_PATH/state" 'unknown')
+        fi
+        # Avoid a race with the remove if the path has been deleted, or
+        # otherwise changed from "InitWait" state e.g. due to a timeout
         if [ "$xenbus_state" != '2' ]
         then
           release_lock "block"
-- 
1.8.1.4

