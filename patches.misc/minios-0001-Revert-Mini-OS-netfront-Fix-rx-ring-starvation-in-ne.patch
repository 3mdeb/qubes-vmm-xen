From de753872c35039b2de00adca72bc77c042743b18 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Sat, 5 Dec 2015 18:17:35 +0100
Subject: [PATCH] Revert "Mini-OS: netfront: Fix rx ring starvation in
 network_rx"
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

This reverts commit 7c8f348390652a67e9356eec9cd2b0f76a9c7c72.
This looks to be a cause of QubesOS/qubes-issues#1486

Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
---
 netfront.c | 36 +++++++++++++++++++-----------------
 1 file changed, 19 insertions(+), 17 deletions(-)

diff --git a/netfront.c b/netfront.c
index 0eca5b5..4e94997 100644
--- a/extras/mini-os/netfront.c
+++ b/extras/mini-os/netfront.c
@@ -96,35 +96,42 @@ static inline int xennet_rxidx(RING_IDX idx)
 void network_rx(struct netfront_dev *dev)
 {
     RING_IDX rp,cons,req_prod;
-    int nr_consumed, more, i, notify;
-#ifdef HAVE_LIBC
-    int some;
-#endif
+    struct netif_rx_response *rx;
+    int nr_consumed, some, more, i, notify;
+
 
-    nr_consumed = 0;
 moretodo:
     rp = dev->rx.sring->rsp_prod;
     rmb(); /* Ensure we see queued responses up to 'rp'. */
+    cons = dev->rx.rsp_cons;
 
-#ifdef HAVE_LIBC
-    some = 0;
-#endif
-    for (cons = dev->rx.rsp_cons; cons != rp; nr_consumed++, cons++)
+    for (nr_consumed = 0, some = 0;
+         (cons != rp) && !some;
+         nr_consumed++, cons++)
     {
         struct net_buffer* buf;
         unsigned char* page;
         int id;
 
-        struct netif_rx_response *rx = RING_GET_RESPONSE(&dev->rx, cons);
+        rx = RING_GET_RESPONSE(&dev->rx, cons);
+
+        if (rx->flags & NETRXF_extra_info)
+        {
+            printk("+++++++++++++++++++++ we have extras!\n");
+            continue;
+        }
+
+
+        if (rx->status == NETIF_RSP_NULL) continue;
 
         id = rx->id;
-        BUG_ON(id >= NET_RX_RING_SIZE);
+        BUG_ON(id >= NET_TX_RING_SIZE);
 
         buf = &dev->rx_buffers[id];
         page = (unsigned char*)buf->page;
         gnttab_end_access(buf->gref);
 
-        if (rx->status > NETIF_RSP_NULL)
+        if(rx->status>0)
         {
 #ifdef HAVE_LIBC
 	    if (dev->netif_rx == NETIF_SELECT_RX) {
@@ -135,7 +142,6 @@ moretodo:
 		memcpy(dev->data, page+rx->offset, len);
 		dev->rlen = len;
 		some = 1;
-                break;
 	    } else
 #endif
 		dev->netif_rx(page+rx->offset,rx->status);
@@ -144,11 +150,7 @@ moretodo:
     dev->rx.rsp_cons=cons;
 
     RING_FINAL_CHECK_FOR_RESPONSES(&dev->rx,more);
-#ifdef HAVE_LIBC
     if(more && !some) goto moretodo;
-#else
-    if(more) goto moretodo;
-#endif
 
     req_prod = dev->rx.req_prod_pvt;
 
-- 
2.1.0

